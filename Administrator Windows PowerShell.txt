PS C:\Users\najia\Desktop\spring_boot_migrator_solution\SBM> C:\Users\najia\.jdks\corretto-17.0.7\bin\java.exe -jar C:\Users\najia\Desktop\spring_boot_migrator_solution\SBM\spring-boot-migrator.jar
--------------------------------------------------------------------------------------------------
                _               _                 _               _                 _
 ___ _ __  _ __(_)_ __   __ _  | |__   ___   ___ | |_   _ __ ___ (_) __ _ _ __ __ _| |_ ___  _ __
/ __| '_ \| '__| | '_ \ / _` | | '_ \ / _ \ / _ \| __| | '_ ` _ \| |/ _` | '__/ _` | __/ _ \| '__|
\__ \ |_) | |  | | | | | (_| | | |_) | (_) | (_) | |_  | | | | | | | (_| | | | (_| | || (_) | |
|___/ .__/|_|  |_|_| |_|\__, | |_.__/ \___/ \___/ \__| |_| |_| |_|_|\__, |_|  \__,_|\__\___/|_|
    |_|                 |___/                                       |___/

Find us...
on GitHub:      https://github.com/spring-projects-experimental/spring-boot-migrator
on Slack:       https://vmware.slack.com/archives/CKB9VJE68 #spring-boot-migrator

This project contains a lot of love. But still, there will be bugs...
So please, give us Feedback:   https://github.com/spring-projects-experimental/spring-boot-migrator/issues
Also, if you like the project please give a star on GitHub.

THANK YOU!

Properties:
-----------
Git Support enabled: true

    - If `sbm.gitSupportEnabled` is `true` and the scanned project is a Git project,
      the git hash will be read during scan.
    - Before each 'apply' it will be verified that no uncommitted changes exist and that
      the stored git hash matches the hash read during scan or after last commit.
      If this is not true a new 'scan' will be done.
    - After each 'apply' it will be verified that no uncommitted changes exist and the Git hash matches.
      This prevents changes in the scanned project during 'apply'.
    - After each 'apply' an automated commit will be done and the new Git hash will be read.
    - If this flag is 'true' IT IS IMPORTANT THAT NO UNCOMMITTED FILES EXIST in the scanned project.

    Use -Dsbm.gitSupportEnabled=true|false as VM parameter on startup to set the property.

Base Package: org.springframework.sbm

    - The package for new classes when no base package can be calculated

    Use -Dsbm.defaultBasePackage=com.acme.packagename as VM parameter on startup to set the property.

TriggerMesh transformation support of Dataweave: false

    - When applying the mule-to-boot recipe, use `sbm.muleTriggerMeshTransformEnabled` to
      generate the code required to send the Dataweave transformation to TriggerMesh using
      the TriggerMesh Dataweave transformation service (https://docs.triggermesh.io/guides/dataweavetransformation/).
    - This will require a TriggerMesh transformation exist on your Kubernetes cluster to function. When running the
      service, be sure to set the `K_SINK` environment variable to your exposed service URL.

    Use -Dsbm.muleTriggerMeshTransformEnabled=true|false as VM parameter on startup to set property.

Get Started:
------------
Type

"help" - to display a list all of the available commands.
"scan <dir>" - to scan an application

--------------------------------------------------------------------------------------------------

migrator:> list

Found these recipes:

  1) remove-redundant-maven-compiler-plugin
     -> Remove standard maven-compiler plugin for applications with boot parent.
  2) initialize-spring-boot-migration
     -> Initialize an application as Spring Boot application.
  3) migrate-jndi-lookup
     -> Migrate JNDI lookup using InitialContext to Spring Boot
  4) migrate-jpa-to-spring-boot
     -> Migrate JPA to Spring Boot
  5) migrate-ejb-jar-deployment-descriptor
     -> Add or overrides @Stateless annotation as defined in ejb deployment descriptor
  6) migrate-weblogic-ejb-deployment-descriptor
     -> Migrate weblogic-ejb-jar.xml deployment descriptor
  7) mark-and-clean-remote-ejbs
     -> Search @Stateless EJBs implementing a @Remote interface
  8) migrate-stateless-ejb
     -> Migration of stateless EJB to Spring components.
  9) migrate-annotated-servlets
     -> Allow Spring Boot to deploy servlets annotated with @WebServlet
  10) migrate-jax-ws
     -> Migrate Jax Web-Service implementation to Spring Boot bases Web-Service
  11) migrate-jax-rs
     -> Any class has import starting with javax.ws.rs
  12) migrate-mule-to-boot
     -> Migrate Mulesoft 3.9 to Spring Boot.
  13) migrate-tx-to-spring-boot
     -> Migration of @TransactionAttribute to @Transactionsl
  14) spring-context-xml-import
     -> Import Spring Framework xml bean configuration into Java configuration without converting them.
  15) migrate-spring-xml-to-java-config
     -> Migrate Spring Framework xml bean configuration to Java configuration.
  16) migrate-jms
     -> Convert JEE JMS app into Spring Boot JMS app
  17) documentation-actions
     -> Create Documentation for Actions
  18) migrate-jsf-2.x-to-spring-boot
     -> Use joinfaces to integrate JSF 2.x with Spring Boot.
  19) cn-spring-cloud-config-server
     -> Externalize properties to Spring Cloud Config Server
  20) boot-2.4-2.5-upgrade-report
     -> Create Upgrade Report for a Spring Boot 2.4 Application
  21) boot-2.7-3.0-dependency-version-update
     -> Bump spring-boot-starter-parent from 2.7.x to 3.0.0
  22) boot-autoconfiguration-update
     -> Create org.springframework.boot.autoconfigure.AutoConfiguration.imports file for new spring 2.7
  23) boot-2.4-2.5-datasource-initializer
     -> Replace deprecated spring.datasource.* properties
  24) boot-2.4-2.5-spring-data-jpa
     -> Rename JpaRepository methods getId() and calls to getOne()
  25) boot-2.4-2.5-dependency-version-update
     -> Update Spring Boot dependencies from 2.4 to 2.5
  26) boot-2.7-3.0-upgrade-report
     -> Create a report for Spring Boot Upgrade from 2.7.x to 3.0.0-M3
  27) boot-2.4-2.5-sql-init-properties
     -> Replace deprecated spring.datasource.* properties
  28) sbu30-report
     -> Create a report for Spring Boot Upgrade from 2.7.x to 3.0.x
  29) sbu30-upgrade-dependencies
     -> Spring boot 3.0 Upgrade - Upgrade dependencies
  30) sbu30-set-java-version
     -> Spring boot 3.0 Upgrade - Set java version property in build file
  31) sbu30-add-milestone-repositories
     -> Spring boot 3.0 Upgrade - Add milestone repository for dependencies and plugins
  32) sbu30-migrate-spring-data-properties
     -> Spring boot 3.0 Upgrade - Migrate 'spring.data' properties to new property names
  33) sbu30-remove-construtor-binding
     -> Spring boot 3.0 Upgrade - Remove redundant @ConstructorBinding annotations
  34) sbu30-migrate-to-jakarta-packages
     -> Spring boot 3.0 Upgrade - Migrate javax packages to new jakarta packages
  35) sbu30-johnzon-dependency-update
     -> Spring boot 3.0 Upgrade - Specify version number for johnzon-core
  36) sbu30-225-logging-date-format
     -> Spring boot 3.0 Upgrade - Logging Date Format
  37) sbu30-auto-configuration
     -> Move EnableAutoConfiguration Property from spring.factories to AutoConfiguration.imports
  38) sbu30-upgrade-spring-cloud-dependency
     -> Upgrade Spring Cloud Dependencies
  39) sbu30-upgrade-boot-version
     -> Spring boot 3.0 Upgrade - Upgrade Spring Boot version
  40) sbu30-remove-image-banner
     -> Spring boot 3.0 Upgrade - Remove the image banner at src/main/resources
  41) sbu30-paging-and-sorting-repository
     -> Spring boot 3.0 Upgrade - Add CrudRepository interface extension additionally to PagingAndSortingRepository
  42) migrate-raml-to-spring-mvc
     -> Create Spring Boot @RestController from .raml files.
  43) migrate-boot-2.3-2.4
     -> Migrate from Spring Boot 2.3 to 2.4
  44) upgrade-boot-1x-to-2x
     -> Migrate applications built on previous versions of Spring Boot to the latest Spring Boot 2.7 release. This recipe will modify an application's build files, make changes to deprecated/preferred APIs, and migrate configuration settings that have changes across Spring Boot versions. This recipe will also chain additional framework migrations (Spring Framework, Spring Data, JUnit, etc) that are required as part of the migration to Spring Boot 2.7.


Run command '> apply <recipe-number>' to apply a recipe.

migrator:> help
AVAILABLE COMMANDS

Apply Shell Command
       * apply, a: Apply a given recipe to the target application.

Built-In Commands
       help: Display help about available commands
       stacktrace: Display the full stacktrace of the last error.
       clear: Clear the shell screen.
       quit, exit: Exit the shell.
       history: Display or save the history of previously run commands
       version: Show version info
       script: Read and execute commands from a file.

Describe Shell Command
       describe, d: Describe a given recipe.

List Shell Command
       list, l: List all existing (applicable and non-applicable) recipes.

Scan Shell Command
       scan, s: Scans the target project directory and get the list of applicable recipes.


Commands marked with (*) are currently unavailable.
Type `help <command>` to learn more.

migrator:> exit
PS C:\Users\najia\Desktop\spring_boot_migrator_solution\SBM> C:\Users\najia\.jdks\corretto-17.0.7\bin\java.exe -jar C:\Users\najia\Desktop\spring_boot_migrator_solution\SBM\spring-boot-migrator.jar
--------------------------------------------------------------------------------------------------
                _               _                 _               _                 _
 ___ _ __  _ __(_)_ __   __ _  | |__   ___   ___ | |_   _ __ ___ (_) __ _ _ __ __ _| |_ ___  _ __
/ __| '_ \| '__| | '_ \ / _` | | '_ \ / _ \ / _ \| __| | '_ ` _ \| |/ _` | '__/ _` | __/ _ \| '__|
\__ \ |_) | |  | | | | | (_| | | |_) | (_) | (_) | |_  | | | | | | | (_| | | | (_| | || (_) | |
|___/ .__/|_|  |_|_| |_|\__, | |_.__/ \___/ \___/ \__| |_| |_| |_|_|\__, |_|  \__,_|\__\___/|_|
    |_|                 |___/                                       |___/

Find us...
on GitHub:      https://github.com/spring-projects-experimental/spring-boot-migrator
on Slack:       https://vmware.slack.com/archives/CKB9VJE68 #spring-boot-migrator

This project contains a lot of love. But still, there will be bugs...
So please, give us Feedback:   https://github.com/spring-projects-experimental/spring-boot-migrator/issues
Also, if you like the project please give a star on GitHub.

THANK YOU!

Properties:
-----------
Git Support enabled: true

    - If `sbm.gitSupportEnabled` is `true` and the scanned project is a Git project,
      the git hash will be read during scan.
    - Before each 'apply' it will be verified that no uncommitted changes exist and that
      the stored git hash matches the hash read during scan or after last commit.
      If this is not true a new 'scan' will be done.
    - After each 'apply' it will be verified that no uncommitted changes exist and the Git hash matches.
      This prevents changes in the scanned project during 'apply'.
    - After each 'apply' an automated commit will be done and the new Git hash will be read.
    - If this flag is 'true' IT IS IMPORTANT THAT NO UNCOMMITTED FILES EXIST in the scanned project.

    Use -Dsbm.gitSupportEnabled=true|false as VM parameter on startup to set the property.

Base Package: org.springframework.sbm

    - The package for new classes when no base package can be calculated

    Use -Dsbm.defaultBasePackage=com.acme.packagename as VM parameter on startup to set the property.

TriggerMesh transformation support of Dataweave: false

    - When applying the mule-to-boot recipe, use `sbm.muleTriggerMeshTransformEnabled` to
      generate the code required to send the Dataweave transformation to TriggerMesh using
      the TriggerMesh Dataweave transformation service (https://docs.triggermesh.io/guides/dataweavetransformation/).
    - This will require a TriggerMesh transformation exist on your Kubernetes cluster to function. When running the
      service, be sure to set the `K_SINK` environment variable to your exposed service URL.

    Use -Dsbm.muleTriggerMeshTransformEnabled=true|false as VM parameter on startup to set property.

Get Started:
------------
Type

"help" - to display a list all of the available commands.
"scan <dir>" - to scan an application

--------------------------------------------------------------------------------------------------

migrator:> scan C:/Users/najia/Desktop/spring_boot_migrator_solution/workspace-mulesoft/test-mule-migration-2

scanning 'C:/Users/najia/Desktop/spring_boot_migrator_solution/workspace-mulesoft/test-mule-migration-2'

Checked preconditions for 'C:\Users\najia\Desktop\spring_boot_migrator_solution\workspace-mulesoft\test-mule-migration-2'
[ok] Found pom.xml.
[ok] 'sbm.gitSupportEnabled' is 'true', changes will be committed to branch [main] after each recipe.
[ok] Required Java version (17) was found.
[ok] Found required source dir 'src/main/java'.


Maven        100% │██████████████████████████████████│ 2/2 (0:00:01 / 0:00:00)

Applicable recipes:

  1) initialize-spring-boot-migration
     -> Initialize an application as Spring Boot application.
  2) migrate-mule-to-boot
     -> Migrate Mulesoft 3.9 to Spring Boot.
  3) cn-spring-cloud-config-server
     -> Externalize properties to Spring Cloud Config Server
  4) sbu30-set-java-version
     -> Spring boot 3.0 Upgrade - Set java version property in build file
  5) sbu30-add-milestone-repositories
     -> Spring boot 3.0 Upgrade - Add milestone repository for dependencies and plugins
  6) sbu30-225-logging-date-format
     -> Spring boot 3.0 Upgrade - Logging Date Format

Run command '> apply <recipe-number>' to apply a recipe.

test-mule-migration-2:> apply 2
Applying recipe 'migrate-mule-to-boot'
[..] Migrating Mulesoft to Spring Boot
    [..] Converting Mulesoft files
        [ok] Adding 3 dependencies
        [ok] Adding 2 methods
    [ok] Converting Mulesoft files
[ok] Migrating Mulesoft to Spring Boot

migrate-mule-to-boot successfully applied the following actions:
  (x)
  (x)
  (x) Migrating Mulesoft to Spring Boot
  (x)
  (x)


Applicable recipes:

  1) initialize-spring-boot-migration
     -> Initialize an application as Spring Boot application.
  2) migrate-mule-to-boot
     -> Migrate Mulesoft 3.9 to Spring Boot.
  3) cn-spring-cloud-config-server
     -> Externalize properties to Spring Cloud Config Server
  4) sbu30-set-java-version
     -> Spring boot 3.0 Upgrade - Set java version property in build file
  5) sbu30-add-milestone-repositories
     -> Spring boot 3.0 Upgrade - Add milestone repository for dependencies and plugins
  6) sbu30-225-logging-date-format
     -> Spring boot 3.0 Upgrade - Logging Date Format

Run command '> apply <recipe-number>' to apply a recipe.

test-mule-migration-2:>
